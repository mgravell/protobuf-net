@using System.Net.Http
@using  Google.Protobuf.Reflection
@using System.IO
@using  ProtoBuf.Reflection
@using ProtoBuf.Models
@inject HttpClient Http

@page "/"
<h2>Generator</h2>
<EditForm Model="@model" OnValidSubmit="@Generate">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="form-group  col-6">
            <label for="language">Language</label>
            <InputSelect id="language" @bind-Value="model.Language" class="form-control" size="4">
                <option>(select)</option>
                @foreach (var language in Enum.GetValues(typeof(GeneratorViewModel.GeneratorLanguageEnum)))
                {
                    <option value="@language">@language</option>
                }
            </InputSelect>
        </div>
        @if (model.HasLanguageVersion())
        {
            <div class="form-group  col-6">
                <label for="language">@model.Language Version</label>
                <InputSelect id="language" @bind-Value="model.LanguageVersion" class="form-control mt-2" size="4">
                    <option>(select)</option>
                    @foreach (var version in model.GetLanguageVersions())
                        {
                        <option value="@version">@version</option>
                        }
                </InputSelect>
            </div>
        }
    </div>
    <div class="form-check">
        <input class="form-check-input" type="checkbox" @bind="model.OneOfEnum" id="oneof" />
        <label class="form-check-label" for="oneof">
            <code>oneof</code> should use enum
        </label>
    </div>
    <div class="form-check">
        <input class="form-check-input" type="checkbox" @bind="model.RepeatedEmitSetAccessors" id="repeated_accessors" />
        <label class="form-check-label" for="repeated_accessors">
            <code>repeated</code> should emit <code>set</code> accessors
        </label>
    </div>
    <div class="form-group">
        <label for="namingConvention">Naming convention</label>
        <InputSelect id="namingConvention" @bind-Value="model.NamingConvention" class="form-control col-4" size="4">
            @foreach (var namingConvention in Enum.GetValues(typeof(GeneratorViewModel.NamingConventionEnum)))
            {
                <option value="@namingConvention">@namingConvention</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="protoContent">.proto file content</label> <button type="button" class="btn btn-secondary" @onclick="LoadSample">Load descriptor.proto</button>
        <textarea class="form-control" @bind="model.ProtoContent" id="protoContent" rows="3"></textarea>
    </div>
    <button type="submit" class="btn btn-primary">Generate</button>

    <ValidationSummary />
</EditForm>

    @foreach (var file in codeFiles)
    {
        <b>FILE = @file.Name</b><br />
        <b>CONTENT =</b>
        <pre>
        @file.Text
    </pre>
    }
    @if (codeFiles.Count == 0)
    {
        <b>NO CODE FILE</b>
    }

    @code{
        private GeneratorViewModel model = new GeneratorViewModel();

        private List<CodeFile> codeFiles = new List<CodeFile>();

        protected async Task LoadSample()
        {
            model.ProtoContent = await Http.GetStringAsync("https://raw.githubusercontent.com/protobuf-net/protobuf-net/4b239629f5f9dbe4770a497f2c81465ab0669504/src/protobuf-net.Test/Schemas/descriptor.proto");
        }

        protected async Task Generate()
        {
            
            using (var reader = new StringReader(model.ProtoContent))
            {
                var set = new FileDescriptorSet
                {
                    ImportValidator = path => true,
                };
                set.Add("my.proto", true, reader);

                set.Process();
                CodeGenerator codegen = CSharpCodeGenerator.Default;
                codeFiles = codegen.Generate(set, NameNormalizer.Default).ToList();
            }
        }

    }
