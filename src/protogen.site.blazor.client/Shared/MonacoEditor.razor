@inject IJSRuntime JsRuntime;
<div class="h-100" style="border: 1px solid grey" @ref="editor"></div>
@code {
    ElementReference editor;

    [Parameter]
    public string Language { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; } = false;

    [Parameter]
    public string FirstContent
    {
        get; set;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("initMonaco", editor, Language, ReadOnly);
            if(!string.IsNullOrEmpty(FirstContent)){
                await SetContent(FirstContent);
            }
        }
    }

    public async Task SetContent(string content)
    {
        await JsRuntime.InvokeVoidAsync("setMonaco", editor, content);
    }

    public async Task<string> GetContent()
    {
        return await JsRuntime.InvokeAsync<string>("getMonaco", editor);
    }

    public async Task AddError(bool isError,int lineNumber, int lineEnd, int columnNumber,int columnEnd, string text){
        await JsRuntime.InvokeAsync<string>("addMonacoError", editor, lineNumber,lineEnd, columnNumber, columnEnd,text, isError);

    }

    public async Task ClearErrors(){
        await JsRuntime.InvokeVoidAsync("cleanMonacoError", editor);

    }
}
